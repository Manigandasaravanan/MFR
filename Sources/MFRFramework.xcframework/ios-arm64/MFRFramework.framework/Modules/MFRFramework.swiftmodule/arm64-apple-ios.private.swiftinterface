// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target arm64-apple-ios18.1 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name MFRFramework
import ARKit
import CoreImage
import CoreML
import DeveloperToolsSupport
import Foundation
@_exported import MFRFramework
import Swift
import SwiftUI
import UIKit
import Vision
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public enum ExpressionType {
  case smile
  case blink
  case zoomIn
  case zoomOut
  case leftTurn
  case rightTurn
  case upTurn
  case downTurn
  case leftRightTurn
  case none
  public static func == (a: MFRFramework.ExpressionType, b: MFRFramework.ExpressionType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum LivenessDetectionResult {
  case matchFound
  case matchNotFound
  case failed
  case spoofingDetected
  case timeOut
  case none
  public static func == (a: MFRFramework.LivenessDetectionResult, b: MFRFramework.LivenessDetectionResult) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension UIKit.UIColor {
  convenience public init(hex: Swift.String)
}
public enum ScannerDetectionResult {
  case success
  public static func == (a: MFRFramework.ScannerDetectionResult, b: MFRFramework.ScannerDetectionResult) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class MFRScanner : UIKit.UIViewController, ARKit.ARSessionDelegate, ARKit.ARSCNViewDelegate {
  @_Concurrency.MainActor @preconcurrency public var onScannerDetection: ((_ result: MFRFramework.ScannerDetectionResult, _ imageBase64: Swift.String?) -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc public func renderer(_ renderer: any SceneKit.SCNSceneRenderer, didAdd node: SceneKit.SCNNode, for anchor: ARKit.ARAnchor)
  @_Concurrency.MainActor @preconcurrency @objc public func session(_ session: ARKit.ARSession, didUpdate frame: ARKit.ARFrame)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension MFRFramework.ExpressionType : Swift.Equatable {}
extension MFRFramework.ExpressionType : Swift.Hashable {}
extension MFRFramework.LivenessDetectionResult : Swift.Equatable {}
extension MFRFramework.LivenessDetectionResult : Swift.Hashable {}
extension MFRFramework.ScannerDetectionResult : Swift.Equatable {}
extension MFRFramework.ScannerDetectionResult : Swift.Hashable {}
